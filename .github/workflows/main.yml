name: Deploy Latest ONNX Model (debuggable, job-level env)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - mlops

permissions:
  contents: write

jobs:
  deploy-latest-onnx:
    runs-on: ubuntu-latest

    # ---- Job-level environment: every step inherits these ----
    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Snowflake CLI (v3)
        shell: bash
        run: |
          echo "🐍 Installing Snowflake CLI (v3)..."
          python3 -m pip install --upgrade pip
          pip install --user --upgrade "snowflake-cli>=3.10.0"
          echo 'export PATH=$HOME/.local/bin:$PATH' >> $GITHUB_ENV
          source $GITHUB_ENV || true
          snow --version || true

      - name: Debug — show job-level Snowflake env variables
        shell: bash
        run: |
          echo "🔎 Showing environment variables (job-level)"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_USER='${SNOWFLAKE_CONNECTIONS_DEFAULT_USER:-<missing>}'"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT='${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT:-<missing>}'"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE='${SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE:-<missing>}'"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE='${SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE:-<missing>}'"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE='${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE:-<missing>}'"
          echo "SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA='${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA:-<missing>}'"
          echo "------------------------"
          echo "env | grep SNOWFLAKE:"
          env | grep SNOWFLAKE || true

      - name: Debug — snow config & connections
        shell: bash
        run: |
          echo "🔎 snow --version"
          snow --version || true
          echo "🔎 snow config list"
          snow config list || true
          echo "🔎 snow connection list"
          snow connection list || true
          echo "🔎 quick connection test (SELECT CURRENT_USER())"
          snow sql -q "SELECT CURRENT_USER();" --format CSV || true

      - name: Ensure fallback config file if env not detected
        shell: bash
        run: |
          echo "🧩 Checking if snow sees default connection..."
          if snow connection list | grep -q "No data"; then
            echo "⚠️ No connections found. Will write ~/.snowflake/config.toml as fallback."
            mkdir -p ~/.snowflake
            cat > ~/.snowflake/config.toml <<EOF
[connections.default]
account = "${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT}"
user = "${SNOWFLAKE_CONNECTIONS_DEFAULT_USER}"
password = "${SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD}"
role = "${SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE}"
warehouse = "${SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE}"
database = "${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE}"
schema = "${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA}"
EOF
            echo "✅ Wrote ~/.snowflake/config.toml"
          else
            echo "✅ Connection(s) already present; no config file written."
          fi
          echo "🔎 Post-check: snow connection list"
          snow connection list || true

      - name: Find latest ONNX filename in stage
        id: find_model
        shell: bash
        run: |
          echo "🔍 Listing @ML_MODELS_STAGE and selecting newest .onnx file..."
          LIST_OUT=$(snow sql -q "LIST @ML_MODELS_STAGE;" --format CSV)
          echo "---- raw LIST output ----"
          echo "$LIST_OUT"
          echo "-------------------------"
          MODEL_FILE=$(echo "$LIST_OUT" | grep '\.onnx' | sort -t',' -k6,6r | head -n1 | cut -d',' -f1 | tr -d '"')
          if [ -z "$MODEL_FILE" ]; then
            echo "❌ No .onnx file found in @ML_MODELS_STAGE. Exiting."
            exit 1
          fi
          echo "MODEL_FILE=${MODEL_FILE}" >> $GITHUB_OUTPUT
          echo "✅ Selected model: ${MODEL_FILE}"

      - name: Download latest ONNX model from stage
        shell: bash
        run: |
          MODEL_FILE="${{ steps.find_model.outputs.MODEL_FILE }}"
          echo "📥 Downloading ${MODEL_FILE} to ./models/ ..."
          mkdir -p models
          snow sql -q "GET @ML_MODELS_STAGE/${MODEL_FILE} FILE://models;" --format CSV
          echo "✅ files in models/:"
          ls -lh models || true

      - name: Commit & push model
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MODEL_FILE="${{ steps.find_model.outputs.MODEL_FILE }}"
          echo "💾 Committing model ${MODEL_FILE} if changed..."
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add models/
          git commit -m "Deploy latest ONNX model: ${MODEL_FILE}" || echo "No changes to commit."
          git push || echo "Push failed (maybe protected branch or no permission)."
