name: Snowflake MLOps Pipeline (Classic Auth - Final v3 Syntax)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      

permissions:
  contents: read

jobs:
  run-mlops-pipeline:
    runs-on: ubuntu-latest

    steps:
      # --------------------------
      # Step 1: Checkout Repository
      # --------------------------
      - name: Checkout Repository
        uses: actions/checkout@v4

      # --------------------------
      # Step 2: Install Latest Snowflake CLI
      # --------------------------
      - name: Install Snowflake CLI (latest)
        uses: snowflakedb/snowflake-cli-action@v2.0

      # --------------------------
      # Step 3: Confirm CLI Version
      # --------------------------
      - name: Show Snowflake CLI Version
        run: |
          echo "‚úÖ Installed Snowflake CLI version:"
          snow --version

      # --------------------------
      # Step 4: Debug Environment Variables
      # --------------------------
      - name: Debug Environment Variables
        env:
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "üîç Checking environment variable values..."
          echo "SNOWFLAKE_USER=${SNOWFLAKE_USER}"
          echo "SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}"
          echo "SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}"
          echo "SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}"
          echo "SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}"

      # --------------------------
      # Step 5: Configure Snowflake Connection
      # --------------------------
      - name: Configure Snowflake Connection
        env:
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "üîß Adding Snowflake CLI connection..."
          snow connection add \
            --name myconn \
            --account "${SNOWFLAKE_ACCOUNT}" \
            --username "${SNOWFLAKE_USER}" \
            --password "${SNOWFLAKE_PASSWORD}" \
            --warehouse "${SNOWFLAKE_WAREHOUSE}" \
            --database "${SNOWFLAKE_DATABASE}" \
            --schema "${SNOWFLAKE_SCHEMA}"
          
          echo "‚úÖ Connection 'myconn' added successfully!"
          snow connection list

      # --------------------------
      # Step 6: Test Snowflake Connection
      # --------------------------
      - name: Test Snowflake Connection
        run: |
          echo "üîó Testing Snowflake connection..."
          snow -c myconn sql -q "SELECT CURRENT_USER(), CURRENT_ACCOUNT(), CURRENT_REGION();"

      # --------------------------
      # Step 7: Trigger ML Pipeline Task
      # --------------------------
      - name: Trigger Snowflake ML Pipeline
        run: |
          echo "üöÄ Executing ML pipeline task..."
          snow -c myconn sql -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            EXECUTE TASK TASK_1_DATA_INGESTION;
          "

      # --------------------------
      # Step 8: Check Task Execution Status
      # --------------------------
      - name: Check Task Execution Status
        run: |
          echo "üìä Checking latest task status..."
          snow -c myconn sql -q "
            SELECT NAME, STATE, COMPLETED_TIME
            FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
            WHERE NAME = 'TASK_1_DATA_INGESTION'
            ORDER BY COMPLETED_TIME DESC
            LIMIT 1;
          "

      # --------------------------
      # Step 9 (Optional): Download Latest ONNX Model
      # --------------------------
      - name: Download Latest ONNX Model
        run: |
          echo "üì• Downloading latest ONNX model from stage..."
          mkdir -p models
          snow -c myconn sql -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            GET @ML_MODELS_STAGE PATTERN='.*onnx' FILE://models;
          "
          echo "‚úÖ
