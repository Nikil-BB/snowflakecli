name: SonarQube Scan + Deploy Latest ONNX Model from Snowflake

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  sonar-and-deploy:
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      # 3Ô∏è‚É£ Run SonarCloud scan
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 4Ô∏è‚É£ Enforce SonarCloud Quality Gate (optional but recommended)
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # 5Ô∏è‚É£ Install Snowflake CLI (v3)
      - name: Install Snowflake CLI
        shell: bash
        run: |
          echo "üêç Installing Snowflake CLI..."
          python3 -m pip install --upgrade "snowflake-cli>=3.10.0"
          echo 'export PATH=$HOME/.local/bin:$PATH' >> $GITHUB_ENV
          source $GITHUB_ENV
          snow --version

      # 6Ô∏è‚É£ Configure Snowflake connection
      - name: Configure Snowflake connection
        shell: bash
        run: |
          echo "üß© Creating ~/.snowflake/config.toml..."
          mkdir -p ~/.snowflake
          {
            echo "[connections.default]"
            echo "account = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT}\""
            echo "user = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_USER}\""
            echo "password = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD}\""
            echo "role = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE}\""
            echo "warehouse = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE}\""
            echo "database = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE}\""
            echo "schema = \"${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA}\""
          } > ~/.snowflake/config.toml

          chmod 600 ~/.snowflake/config.toml
          echo "‚úÖ Snowflake config created (password hidden)."

      # 7Ô∏è‚É£ Verify Snowflake connection
      - name: Verify Snowflake connection
        shell: bash
        run: |
          echo "üîé Testing Snowflake connection..."
          snow connection list
          snow sql -q "SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_DATABASE(), CURRENT_SCHEMA();" --format CSV

      # 8Ô∏è‚É£ Find latest ONNX model in Snowflake stage
      - name: Find latest ONNX model in Snowflake stage
        id: find_model
        shell: bash
        run: |
          echo "üîç Searching for latest .onnx file in @ML_MODELS_STAGE..."
          LIST_OUT=$(snow sql -q "LIST @ML_MODELS_STAGE;" --format CSV)
          echo "$LIST_OUT" > snowflake_list.csv
          MODEL_FILE=$(echo "$LIST_OUT" | grep '\.onnx' | \
            awk -F',' '{
              gsub(/"/, "", $5);
              cmd = "date -d \"" $5 "\" +%s";
              cmd | getline t; close(cmd);
              print t "," $1;
            }' | sort -t',' -k1,1nr | head -n1 | cut -d',' -f2 | awk -F'/' '{print $NF}')

          if [ -z "$MODEL_FILE" ]; then
            echo "‚ùå No .onnx files found in @ML_MODELS_STAGE."
            exit 1
          fi
          echo "‚úÖ Latest ONNX model: $MODEL_FILE"
          echo "MODEL_FILE=$MODEL_FILE" >> $GITHUB_OUTPUT

      # 9Ô∏è‚É£ Download latest ONNX model
      - name: Download latest ONNX model
        shell: bash
        run: |
          MODEL_FILE="${{ steps.find_model.outputs.MODEL_FILE }}"
          echo "üì• Downloading model: ${MODEL_FILE}"
          mkdir -p models
          snow stage copy @ML_MODELS_STAGE/${MODEL_FILE} ./models/
          echo "‚úÖ Files downloaded:"
          ls -lh models

      # üîü Commit and push latest ONNX model
      - name: Commit and push latest model
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MODEL_FILE="${{ steps.find_model.outputs.MODEL_FILE }}"
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add models/
          git commit -m "Deploy latest ONNX model: ${MODEL_FILE}" || echo "No changes to commit."
          git push || echo "Push skipped (protected branch or no changes)."

      # 1Ô∏è‚É£1Ô∏è‚É£ Upload logs for observability
      - name: Upload Snowflake logs
        uses: actions/upload-artifact@v4
        with:
          name: snowflake-logs
          path: |
            snowflake_list.csv
            models/
