name: Deploy Latest ONNX Model from Snowflake

on:
  push:
    branches: [main, mlops]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy-latest-onnx:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 1: Install Snowflake CLI
      - name: Install Snowflake CLI
        shell: bash
        run: |
          echo "üêç Installing Snowflake CLI (v3.12.0)..."
          python3 -m pip install --upgrade pip
          pip install --upgrade "snowflake-cli>=3.10.0"
          snow --version

      # Step 2: Debug Environment
      - name: Debug - Show Environment
        shell: bash
        run: |
          echo "üîé Checking Environment Variables..."
          env | grep SNOWFLAKE || echo "‚ö†Ô∏è No Snowflake environment variables found!"

      # Step 3: Fetch and Deploy Latest ONNX Model
      - name: Fetch and Deploy Latest ONNX Model
        shell: bash
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        run: |
          echo "üîó Connecting to Snowflake using environment-based DEFAULT connection..."
          echo "üîß Connection test..."
          snow connection test || echo "‚ö†Ô∏è Connection test failed, printing diagnostics..."

          echo "üîç Listing connections..."
          snow connection list || echo "‚ö†Ô∏è No connections detected."

          echo "üîç Finding latest ONNX model..."
          MODEL_FILE=$(snow sql -q "LIST @ML_MODELS_STAGE;" --format CSV \
            | grep '.onnx' \
            | sort -t',' -k6,6r \
            | head -n1 \
            | cut -d',' -f1 \
            | tr -d '"')

          if [ -z "$MODEL_FILE" ]; then
            echo "‚ùå No ONNX model found in ML_MODELS_STAGE!"
            exit 1
          fi

          echo "‚úÖ Latest model identified: ${MODEL_FILE}"

          echo "üì• Downloading ${MODEL_FILE}..."
          mkdir -p models
          snow sql -q "
            USE DATABASE ${SNOWFLAKE_CONNECTIONS_DEFAULT_DATABASE};
            USE SCHEMA ${SNOWFLAKE_CONNECTIONS_DEFAULT_SCHEMA};
            GET @ML_MODELS_STAGE/${MODEL_FILE} FILE://models;
          " --format CSV

          echo "‚úÖ Model files downloaded:"
          ls -lh models

          echo "üíæ Committing model to repository..."
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add models/
          git commit -m "Deploy latest ONNX model: ${MODEL_FILE}" || echo "No new model to commit."
          git push




