name: Snowflake MLOps Pipeline via OIDC (WIF)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - mlops

permissions:
  id-token: write      # Required for OIDC token
  contents: read       # Needed to checkout repo

jobs:
  run-mlops-pipeline:
    runs-on: ubuntu-latest
    environment: prod   # Must match SUBJECT in Snowflake OIDC user

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # Security best practice for OIDC

      # âœ… Install Snowflake CLI from GitHub tag or branch (no cli-version)
      - name: Install Snowflake CLI (from GitHub branch/tag)
        uses: snowflakedb/snowflake-cli-action@v2.0
        with:
          custom-github-ref: "v3.11.0"   # or "main" / "feature/my-branch"
          use-oidc: true                 # Enables secure OIDC authentication

      - name: Verify Snowflake OIDC Authentication
        run: |
          echo "ðŸ”— Testing OIDC authentication to Snowflake..."
          snow sql -x -q "
            SELECT CURRENT_USER() AS USER_NAME,
                   CURRENT_ROLE() AS ROLE,
                   CURRENT_ACCOUNT() AS ACCOUNT,
                   CURRENT_REGION() AS REGION;
          "
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}

      - name: Trigger ML Pipeline in Snowflake
        run: |
          echo "ðŸš€ Executing ML pipeline..."
          snow sql -x -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            EXECUTE TASK TASK_1_DATA_INGESTION;
          "
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}

      - name: Check Task Execution Status
        run: |
          echo "ðŸ“Š Checking last pipeline task execution..."
          snow sql -x -q "
            SELECT NAME, STATE, COMPLETED_TIME, QUERY_ID
            FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
            WHERE NAME = 'TASK_1_DATA_INGESTION'
            ORDER BY COMPLETED_TIME DESC
            LIMIT 1;
          "
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}

      - name: Download Latest ONNX Model (Optional)
        run: |
          echo "ðŸ“¥ Downloading latest ONNX model from stage..."
          mkdir -p models
          snow sql -x -q "
            USE WAREHOUSE MLOPS_WH;
            USE DATABASE POWERCONSUMPTION;
            USE SCHEMA PUBLIC;
            GET @ML_MODELS_STAGE PATTERN='.*onnx' FILE://models;
          "
          echo "âœ… Model(s) downloaded to ./models directory."
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}

      - name: Upload Model as Artifact (Optional)
        uses: actions/upload-artifact@v4
        with:
          name: latest-onnx-model
          path: models/
